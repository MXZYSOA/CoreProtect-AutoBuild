name: Daily Build and Deploy

on:
  schedule:
    - cron: '0 5 * * *'  # 每天凌晨5点触发
  push:
    branches:
      - main  # 确保你推送的是这个分支

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # 确保有足够的权限来创建发布

    steps:
      # Checkout the current repository (if needed for any reason)
      - name: Checkout Current Repository
        uses: actions/checkout@v4

      # Clone the external repository to a specific path
      - name: Clone External Repository
        run: git clone --branch master https://github.com/PlayPro/CoreProtect ./external-coreprotect

      # Verify POM file exists in the cloned repository
      - name: Verify POM file exists
        run: ls -la ./external-coreprotect/pom.xml || (echo "POM file not found" && exit 1)

      # Set up JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Cache Maven packages
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('external-coreprotect/**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      # Build with Maven in the correct directory
      - name: Build with Maven
        run: mvn -B verify
        working-directory: ./external-coreprotect

      # List target directory contents to check if JAR files are generated
      - name: List target directory contents
        run: ls -la ./external-coreprotect/target/

      # Find CoreProtect JAR File
      - name: Find CoreProtect JAR File
        id: find-jar
        run: |
          COREPROTECT_JAR=$(find ./external-coreprotect/target -name 'CoreProtect-*.jar')
          if [ -z "$COREPROTECT_JAR" ]; then
            echo "JAR file not found"
            exit 1
          else
            echo "COREPROTECT_JAR=$COREPROTECT_JAR" >> $GITHUB_ENV
            echo "Found JAR file: $COREPROTECT_JAR"
          fi

      # Set date and short sha as tag name
      - name: Set date and short sha as tag name
        id: set_tag_name
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          DATE=$(date +'%Y-%m-%d')
          echo "TAG_NAME=${DATE}-${SHORT_SHA}" >> $GITHUB_ENV
          echo "Tag name will be: ${DATE}-${SHORT_SHA}"

      # Create Release
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}  # 使用日期和短SHA作为标签名
          body: "Automated daily build"  # 发布描述
          draft: false  # 设置为 false 表示发布不是草稿
          prerelease: true  # 标记为预发布

      # Debugging: Print release creation result
      - name: Debug Release Creation
        if: steps.create_release.outcome == 'success'
        run: echo "Release created successfully with tag: ${{ env.TAG_NAME }}"

      # Validate JAR file existence and print absolute path
      - name: Validate JAR file existence
        if: steps.find-jar.outputs.COREPROTECT_JAR != ''
        run: |
          JAR_PATH=${{ env.COREPROTECT_JAR }}
          if [ ! -f "$JAR_PATH" ]; then
            echo "JAR file does not exist at: $JAR_PATH"
            exit 1
          else
            echo "JAR file exists at: $(realpath $JAR_PATH)"
          fi

      # Upload CoreProtect JAR to Release
      - name: Upload CoreProtect JAR to Release
        if: steps.create_release.outcome == 'success' && steps.find-jar.outputs.COREPROTECT_JAR != ''
        uses: actions/upload-release-asset@v1.0.0  # 使用最新版本
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # 从创建Release步骤获取上传URL
          asset_path: ${{ env.COREPROTECT_JAR }}  # 动态获取的JAR文件路径
          asset_name: coreprotect.jar  # 上传的文件名
          asset_content_type: application/java-archive

      # Debugging: Print upload details
      - name: Debug Upload Details
        if: steps.create_release.outcome == 'success' && steps.find-jar.outputs.COREPROTECT_JAR != ''
        run: |
          echo "Upload URL: ${{ steps.create_release.outputs.upload_url }}"
          echo "Asset Path: ${{ env.COREPROTECT_JAR }}"